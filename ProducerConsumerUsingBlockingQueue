import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class ProducerConsumerProblemUsingBlockingQueue {
	private static BlockingQueue<Integer> queue= new ArrayBlockingQueue<>(10);
	public static void main(String[] args) {
		Thread producerThread= new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					producer();
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
		});
		
		Thread consumerThread= new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					Thread.sleep(100);
				}
				catch(Exception e) {
					e.printStackTrace();
				}
				
				try {
					consumer();
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
		});
		
		producerThread.start();
		consumerThread.start();
	}
	
	public static void producer() throws InterruptedException {
		Random rand= new Random();
		while(true) {
				Thread.sleep(2000);
				int value=rand.nextInt(100);
				queue.put(value);
				System.out.println("Produced"+value);
			} 
	}
	
	public static void consumer() throws InterruptedException {
		while(true) {
				Thread.sleep(2000);
				int val=queue.take();
				System.out.println("Consumed"+val);
		}
	}
}
